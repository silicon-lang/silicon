name: Build

on:
  push:
    branches:
      - master
  pull_request:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  linux:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#configuring-a-build-matrix
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Install ccache
        run: sudo apt-get update
          && sudo apt-get install -y ccache

      - name: Install Bison
        run: wget http://ftp.gnu.org/gnu/bison/bison-3.5.4.tar.gz
             && tar -zxvf bison-3.5.4.tar.gz
             && cd bison-3.5.4
             && ./configure
             && make
             && sudo make install

      - name: Install RE2C
        run: wget https://github.com/skvadrik/re2c/releases/download/1.3/re2c-1.3.tar.xz
             && tar -xvf re2c-1.3.tar.xz
             && cd re2c-1.3
             && autoreconf -i -W all
             && ./configure
             && make
             && sudo make install

      - uses: actions/cache@v2
        with:
          path: .ccache
          key: ${{ runner.os }}-ccache-${{ env.BUILD_TYPE }}
          restore-keys: |
            ${{ runner.os }}-ccache-

      - name: Create Build Environment
        # Some projects don't allow in-source building, so create a separate build directory
        # We'll use this as our working directory for all subsequent commands
        run: cmake -E make_directory ${{runner.workspace}}/build

      - name: Configure CMake
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        working-directory: ${{runner.workspace}}/build
        # Note the current convention is to use the -S and -B options here to specify source
        # and build directories, but this is only available with CMake 3.13 and higher.
        # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
        run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DLLVM_CCACHE_BUILD=ON

      - name: Build
        working-directory: ${{runner.workspace}}/build
        shell: bash
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: cmake --build . --target silicon --config $BUILD_TYPE

      - name: Test
        working-directory: ${{runner.workspace}}/build
        shell: bash
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C $BUILD_TYPE

      - name: Compress Artifact
        working-directory: ${{runner.workspace}}/build
        shell: bash
        run: tar -czvf silicon.tar.gz silicon

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: silicon-linux.tar.gz
          path: ${{runner.workspace}}/build/silicon.tar.gz
          if-no-files-found: error
